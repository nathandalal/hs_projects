#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment0.text=\ \n\ Runs\ Solitaire.\n
comment1.params=
comment1.target=Solitaire()
comment1.text=\n\ Constructor\ for\ an\ object\ of\ class\ Solitare.\n\ Initializes\ instance\ variables\ to\ begin\ the\ game\ of\ solitaire.\n
comment10.params=
comment10.target=void\ resetStock()
comment10.text=\n\ Moves\ all\ cards\ from\ waste\ to\ stock.\n\ All\ cards\ moved\ to\ stock\ are\ turned\ face\ down.\n
comment11.params=card\ index
comment11.target=boolean\ canAddToPile(Card,\ int)
comment11.text=\n\ Returns\ true\ if\ card\ can\ legally\ be\ moved\ to\ the\ top\ of\ the\ pile.\n\ If\ the\ pile\ is\ empty,\ only\ a\ king\ (rank\ 13)\ can\ be\ placed\ there.\n\ If\ the\ pile's\ first\ card\ is\ face-down,\ no\ other\ cards\ can\ be\ placed\ there.\n\ If\ the\ pile's\ first\ card\ is\ face-up,\ the\ card\ subsequently\ placed\ must\ have\n\ a\ rank\ of\ 1\ value\ lower\ than\ the\ first\ card,\ and\ must\ have\ the\ opposite\ color.\n\ \n\ @param\ card\ the\ potential\ card\ that\ needs\ to\ be\ tested\n\ @param\ index\ index\ of\ the\ pile\ to\ check\n\ \n\ @return\ true\ if\ card\ can\ be\ legally\ moved\ to\ the\ top\ of\ the\ pile,\n\ \ \ \ \ \ \ \ \ false\ otherwise\n\ \ \ \ \ \ \ \ \ \n\ @throws\ IndexOutOfBoundsException\ if\ pile\ reference\ index\ is\ not\ valid\ (must\ be\ between\ 0\ and\ 6)\n
comment12.params=index
comment12.target=java.util.Stack\ removeFaceUpCards(int)
comment12.text=\n\ Removes\ all\ face-up\ cards\ from\ a\ pile\ and\ returns\ a\ stack\ with\ those\ face-up\ cards.\n\ Returns\ an\ empty\ stack\ if\ there\ are\ no\ face-up\ cards\ in\ the\ pile\ indicated.\n\ \n\ @param\ index\ index\ of\ the\ pile\ to\ check\n\ \n\ @return\ the\ stack\ of\ cards\ that\ are\ face\ up\ in\ the\ pile\ indicated\n\ \n\ Postcondition\:\ All\ face-up\ cards\ from\ the\ pile\ are\ removed.\n\ \n\ @throws\ IndexOutOfBoundsException\ if\ pile\ reference\ index\ is\ not\ valid\ (must\ be\ between\ 0\ and\ 6)\n
comment13.params=cards\ index
comment13.target=void\ addToPile(java.util.Stack,\ int)
comment13.text=\n\ Removes\ elements\ from\ the\ stack\ passed\ and\ adds\ them\ to\ the\ indicated\ pile.\n\ \n\ @param\ cards\ the\ cards\ to\ add\ to\ the\ pile\n\ @param\ index\ the\ index\ of\ the\ pile\ of\ which\ to\ add\ cards\n\ \n\ Postcondition\:\ Every\ card\ in\ cards\ is\ moved\ to\ the\ pile\ indicated.\n\ \n\ @throws\ IndexOutOfBoundsException\ if\ pile\ reference\ index\ is\ not\ valid\ (must\ be\ between\ 0\ and\ 6)\n
comment14.params=card\ index
comment14.target=boolean\ canAddToFoundation(Card,\ int)
comment14.text=\n\ Checks\ if\ a\ card\ can\ be\ added\ to\ a\ foundation.\n\ If\ the\ foundation\ is\ empty,\ only\ an\ ace\ can\ be\ added\ to\ it.\n\ If\ the\ foundation\ is\ not\ empty,\ only\ cards\ of\ one\ rank\ or\ higher\ with\ the\ same\ suit\ \n\ can\ be\ added\ to\ the\ foundation\ stacks.\n\ \n\ @param\ card\ the\ Card\ to\ potentially\ be\ added\ to\ the\ foundation\n\ @param\ index\ the\ index\ of\ the\ foundation\ to\ check\n\ \n\ @return\ true\ if\ card\ can\ be\ legally\ added\ to\ specified\ foundation,\ false\ otherwise\n\ \n\ @throws\ IndexOutOfBoundsException\ if\ foundation\ reference\ index\ is\ not\ valid\ (must\ be\ between\ 0\ and\ 3)\n
comment15.params=
comment15.target=void\ stockClicked()
comment15.text=\n\ called\ when\ the\ stock\ is\ clicked\n
comment16.params=
comment16.target=void\ wasteClicked()
comment16.text=\n\ called\ when\ the\ waste\ is\ clicked\n
comment17.params=index
comment17.target=void\ pileClicked(int)
comment17.text=\n\ called\ when\ given\ pile\ is\ clicked\n\ \n\ @param\ index\ the\ index\ of\ the\ pile\ stack\n\ \n\ @throws\ IndexOutOfBoundsException\ if\ pile\ reference\ index\ is\ not\ valid\ (must\ be\ between\ 0\ and\ 6)\n
comment18.params=index
comment18.target=void\ foundationClicked(int)
comment18.text=\n\ called\ when\ given\ foundation\ is\ clicked\n\ \n\ @param\ index\ the\ index\ of\ the\ foundation\ stack\n\ \n\ @throws\ IndexOutOfBoundsException\ if\ foundation\ index\ is\ not\ valid\ (must\ be\ between\ 0\ and\ 3)\n
comment19.params=
comment19.target=void\ passSecond()
comment19.text=\n\ Passes\ a\ second\ and\ increments\ the\ total\ time.\n
comment2.params=cards
comment2.target=Card\ getSurfaceCard(java.util.Stack)
comment2.text=\n\ returns\ card\ on\ top\ of\ a\ passed\ stack,\n\ or\ null\ if\ it\ is\ empty\n\ \n\ @return\ a\ reference\ to\ the\ first\ card\ in\ the\ stack\ of\ cards\n
comment20.params=
comment20.target=java.lang.String\ displayTime()
comment20.text=\n\ Returns\ the\ time\ in\ digital\ clock\ format.\n\ \n\ @return\ string\ of\ time\n
comment21.params=
comment21.target=boolean\ isGameOver()
comment21.text=\n\ Checks\ if\ game\ is\ over\ (All\ foundations\ full)\n\ \n\ @return\ true\ if\ game\ is\ over,\ false\ if\ still\ going\n
comment22.params=
comment22.target=boolean\ winCondition()
comment22.text=\n\ Returns\ whether\ game\ can\ be\ won\ automatically.\n\ \n\ @return\ if\ the\ game\ can\ be\ won\ automatically,\ false\ otherwise\n\ \n\ WARNING\:\ Either\ this\ or\ moveAllToFoundation()\ is\ not\ working.\ Not\ implemented.\n
comment23.params=
comment23.target=boolean\ pilesEmpty()
comment23.text=\n\ Returns\ if\ all\ piles\ are\ empty\n\ \n\ @return\ if\ all\ piles\ are\ empty\n
comment24.params=
comment24.target=void\ moveAllToFoundation()
comment24.text=\n\ Moves\ all\ cards\ from\ piles\ to\ foundations\n\ \n\ Precondition\:\ pilesEmpty()\ is\ true\n\ \n\ WARNING\:\ Either\ this\ method\ or\ winCondition()\ is\ not\ working.\n
comment25.params=
comment25.target=int\ getNumMoves()
comment25.text=\n\ Returns\ number\ of\ moves.\n\ \n\ @return\ numMoves\ instance\ variable\n
comment26.params=
comment26.target=void\ undoMove()
comment26.text=\n\ Undoes\ a\ move\ from\ the\ user.\n\ \n\ Not\ fully\ implemented.\n
comment3.params=
comment3.target=Card\ getStockCard()
comment3.text=\n\ returns\ the\ card\ on\ top\ of\ the\ stock,\n\ or\ null\ if\ it\ is\ empty\n\ \n\ @return\ a\ reference\ to\ the\ first\ card\ in\ the\ stock\ stack\ of\ cards\n
comment4.params=
comment4.target=Card\ getWasteCard()
comment4.text=\n\ returns\ the\ card\ on\ top\ of\ the\ waste,\n\ or\ null\ if\ it\ is\ empty\n\ \n\ @return\ a\ reference\ to\ the\ first\ card\ in\ the\ waste\ stack\ of\ cards\n
comment5.params=index
comment5.target=Card\ getFoundationCard(int)
comment5.text=\n\ returns\ the\ card\ on\ top\ of\ the\ given\ foundation,\ \n\ or\ null\ if\ the\ foundation\ is\ empty\n\ \n\ @param\ index\ the\ index\ of\ the\ foundation\ stack\ to\ check\n\ \n\ @throws\ IndexOutOfBoundsException\ if\ foundation\ index\ is\ not\ valid\ (must\ be\ between\ 0\ and\ 3)\n
comment6.params=index
comment6.target=java.util.Stack\ getPile(int)
comment6.text=\n\ returns\ a\ reference\ to\ the\ pile\ associated\ with\ the\ passed\ index\n\ \n\ @param\ index\ the\ index\ of\ the\ pile\ stack\ to\ retrieve\n\ @return\ the\ stack\ associated\ with\ the\ passed\ index\ in\ the\ piles\n\ \n\ @throws\ IndexOutOfBoundsException\ if\ pile\ reference\ index\ is\ not\ valid\ (must\ be\ between\ 0\ and\ 6)\n
comment7.params=
comment7.target=void\ createStock()
comment7.text=\n\ Creates\ an\ ArrayList\ to\ be\ randomly\ placed\ into\ the\ stock\ Stack.\n\ \n\ Postcondition\:\ The\ 52\ cards\ in\ the\ stock\ will\ be\ every\ card\ possible\ in\ a\ standard\ 52\ card\ deck.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ In\ other\ words,\ all\ possiblities\ of\ a\ card\ will\ be\ covered.\n
comment8.params=
comment8.target=void\ deal()
comment8.text=\n\ Deals\ cards\ from\ the\ stock\ on\ to\ the\ piles\ in\ the\ order\ and\ number\ dictated\ by\ the\ rules\ of\ solitaire.\n\ Number\ of\ cards\ in\ each\ pile\ is\ equivalent\ to\ pile\ index\ +\ 1.\n\ Last\ card\ in\ each\ pile\ is\ turned\ face\ up.\n
comment9.params=
comment9.target=void\ dealThreeCards()
comment9.text=\n\ Moves\ three\ cards\ from\ the\ stock\ Stack\ to\ the\ waste\ stack.\n\ All\ cards\ moved\ to\ the\ waste\ stack\ are\ turned\ face\ up.\n
numComments=27
